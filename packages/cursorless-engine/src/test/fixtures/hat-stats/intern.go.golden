*   *       *           *      * *
// Package intern interns strings.
[] [-----] [----] [-----] [-----]#

x                               x
*     *      *     *  *       * *
// Interning is best effort only.
[] [-------] [] [--] [----] [--]#

v
*         *   *       * *      *    *
// Interned strings may be removed automatically
[] [------] [-----] [-] [] [-----] [-----------]

w   x  x                           v
*   *  *    *     *          *     *
// at any time without notification.
[] [] [-] [--] [-----] [----------]#

o   x              x  x      x      x
*   *        *     *  *      *      *
// All functions may be called concurrently
[] [-] [-------] [-] [] [----] [----------]

#              x     v   x      vw
*  *           *     *   *      **
// with themselves and each other.
[] [--] [--------] [-] [--] [---]#

         v
   *     *
package intern
[-----] [----]

         v  x
  *    * *  *
import "sync"
[----] #[--]#

 x     v  w  o x      o  # v
 *     *  *  * *   *  *  * *  *
var pool sync.Pool = sync.Pool{
[-] [--] [--]#[--] # [--]#[--]#

   x   x       v      x  v
   **  *  **   *      ** *
␉New: func() interface{} {
 [-]# [--]## [-------]## #

     v     x x  x      x  w    x
     *     * *  **     ** *    *
␉	return make(map[string]string)
  [----] [--]#[-]#[----]#[----]#

 x
 **
␉},
 ##

v
*
}
#

^   o        w    xx        w^
*   *        *    **        **
// String returns s, interned.
[] [----] [-----] ## [------]#

   v      vvv  #    v  ^     w
   *      ***  *    *  *     *
func String(s string) string {
[--] [----]## [----]# [----] #

 x xx  w  0 v ww>o v x  w   x 0    o
 * **  *  * * **** * *  *   * *    *
␉m := pool.Get().(map[string]string)
 # ## [--]#[-]####[-]#[----]#[----]#

 wv  v vv vvwv
 **  * ** ****
␉c, ok := m[s]
 ## [] ## ####

  x  w o
  *  * *
␉if ok {
 [] [] #

     w~ o #w#
     ** * ***
␉	pool.Put(m)
  [--]#[-]###

   w     o
   *     *
␉	return c
  [----] #

 w
 *
␉}
 #

 owow w #
 **** * *
␉m[s] = s
 #### # #

  o  + # ^#^
  *  * * ***
␉pool.Put(m)
 [--]#[-]###

  o     ^
  *     *
␉return s
 [----] #

o
*
}
#

0   #       ^    x    v       # w      ww    #
*   *       *    *    *       * *      **    *    b
// Bytes returns b converted to a string, interned.
[] [---] [-----] # [-------] [] # [----]# [------]#

 0    ^   0v oo 0  0      o #
 *    *   ** ** *  *      * *
func Bytes(b []byte) string {
[--] [---]## ##[--]# [----] #

 ^ wo    o  ^ >> ~ o #  o   # >    ~
 * **    *g * **r* * *  *   * *    *
␉m := pool.Get().(map[string]string)
 # ## [--]#[-]####[-]#[----]#[----]#

 #o  o o# 0^ ~    +w+^
 **  * ** ** *    ****
␉c, ok := m[string(b)]
 ## [] ## ##[----]####

  v  # ^
  *  * *
␉if ok {
 [] [] #

     #  >  >
     *p * b*b
␉	pool.Put(m)
  [--]#[-]###

   0     ^
   *     *
␉	return c
  [----] #

 #
 *
␉}
 #

 0 #^      # o
 * **      *g*g
␉s := string(b)
 # ## [----]###

 ~0>0 0 ~
 **** * *
␉m[s] = s
 #### # #

  ^    ~  +
  *  y * r*r
␉pool.Put(m)
 [--]#[-]###

  >     +
  *     *
␉return s
 [----] #

^
*
}
#

